// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // instruction[15] : 0->A命令 1->D命令
    DMux(in=true, sel=instruction[15], a=instA, b=instC); 
    // C命令 で　d1 (instruction[5]) == 1 の場合は ARegister に書き込み
    And(a=instC, b=instruction[5], out=instCAndARegWrite);

    // どちらかの場合は更新
    Or(a=instA, b=instCAndARegWrite, out=writeA);

    // ARegister向けの input を決定
    // instruction[15] == 1 だった場合は instruction の値を write
    Mux16(a=outALU, b=instruction, sel=instA, out=inA);

    // A Register 更新
    ARegister(
        in=inA, 
        load=writeA, 
        out=outA,
        out[0..14]=addressM);

    // a (instruction[12] == 0) inALUy = RegisterA
    // a (instruction[12] == 1) inALUy = inM
    Mux16(a=outA, b=inM, sel=instruction[12], out=inALUy);

    // C命令 で　d1 (instruction[4]) == 1 の場合は DRegister に書き込み
    And(a=instC, b=instruction[4], out=instCAndDRegWrite);
    DRegister(
        in=outALU, 
        load=instCAndDRegWrite, 
        out=outD);

    ALU(
        x=outD, 
        y=inALUy, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outM, 
        out=outALU, 
        zr=zr, 
        ng=ng);

    // C命令 で　d1 (instruction[3]) == 1 の場合は writeM = 1    
    And(a=instC, b=instruction[3], out=writeM);

    // ProgramCounter の更新
    // 効率的な書き方が浮かばなかった
    // https://github.com/havivha/Nand2Tetris/blob/master/05/CPU.hdl#L65
    Or(a=zr, b=ng, out=notPos);
    Not(in=notPos, out=pos);
    And(a=instruction[1], b=zr, out=jeq);
    And(a=instruction[2], b=ng, out=jlt);
    And(a=instruction[0], b=pos, out=jgt);

    Or(a=jgt, b=jeq, out=jge);
    Or(a=jlt, b=jge, out=jumpA);
    And(a=instC, b=jumpA, out=loadPC);
    Not(in=loadPC, out=incPC);
    PC(
        in=outA, 
        load=loadPC, 
        inc=incPC, 
        reset=reset, 
        out[0..14]=pc);
}
