// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    
    // RAM      : 0000 0x000 - 0011 0xFFF
    // Screen   : 0100 0x000 - 0101 0xFFF
    // Keyboard : 0110 0x000

    DMux4Way(in=load, sel=address[13..14], a=ramaddr0, b=ramaddr1, c=scrnAddr, d=kybdAddr);
    Or(a=ramaddr0, b=ramaddr1, out=ramAddr);

    // Built in RAM16K input address bus size is 14 bit
    RAM16K(in=in, load=ramAddr, address=address[0..13], out=ramOut);     
    // Built in Screen input address bus size is 13 bit
    Screen(in=in, load=scrnAddr, address=address[0..12], out=scrnOut);
    Keyboard(out=kbdOut);

    Mux4Way16(a=ramOut, b=ramOut, c=scrnOut, d=kbdOut, sel=address[13..14], out=out);
}